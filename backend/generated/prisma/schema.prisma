generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             Int        @id @default(autoincrement())
  email          String     @unique
  password       String
  username       String     @unique
  firstName      String
  lastName       String
  birthDate      DateTime
  gender         String
  bio            String?
  avatar         String?
  latitude       Float?
  longitude      Float?
  photos         Photo[]
  interests      Interest[] @relation("UserInterests")
  sentLikes      Like[]     @relation("SentLikes")
  receivedLikes  Like[]     @relation("ReceivedLikes")
  matchesAsUser1 Match[]    @relation("MatchesAsUser1")
  matchesAsUser2 Match[]    @relation("MatchesAsUser2")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Photo {
  id     Int    @id @default(autoincrement())
  url    String
  user   User   @relation(fields: [userId], references: [id])
  userId Int
}

model Interest {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[] @relation("UserInterests")
}

model Like {
  id         Int      @id @default(autoincrement())
  sender     User     @relation("SentLikes", fields: [senderId], references: [id])
  senderId   Int
  receiver   User     @relation("ReceivedLikes", fields: [receiverId], references: [id])
  receiverId Int
  createdAt  DateTime @default(now())

  @@unique([senderId, receiverId])
}

model Match {
  id        Int      @id @default(autoincrement())
  user1     User     @relation("MatchesAsUser1", fields: [user1Id], references: [id])
  user1Id   Int
  user2     User     @relation("MatchesAsUser2", fields: [user2Id], references: [id])
  user2Id   Int
  createdAt DateTime @default(now())

  @@unique([user1Id, user2Id])
}
